package mypackage


rule "Japan?"
when
    //init
then
    GUI_question gui = make_question_2(Questions.japan, Answers.JAPANT, Answers.JAPANF);
    show_question(frame, gui, kcontext.getKieRuntime());
end;

rule "Unemployment?"
when
    Response(que == Questions.japan, anw == Answers.JAPANF.getFullName());
then
    GUI_question gui = make_question_2(Questions.unemp, Answers.UNEMPT, Answers.UNEMPF);
    show_question(frame, gui, kcontext.getKieRuntime());
end;

rule "Alaska?"
when
    Response(que == Questions.unemp, anw == Answers.UNEMPF.getFullName());
then
    GUI_question gui = make_question_2(Questions.alaska, Answers.ALASKAT, Answers.ALASKAF);
    show_question(frame, gui, kcontext.getKieRuntime());
end;

rule "Diet?"
when
    Response(que == Questions.alaska, anw == Answers.ALASKAF.getFullName());
then
    GUI_question gui = make_question_2(Questions.diet, Answers.DIETT, Answers.DIETF);
    show_question(frame, gui, kcontext.getKieRuntime());
end;

rule "Vegetarian?"
when
    Response(que == Questions.diet, anw == Answers.DIETF.getFullName());
then
    GUI_question gui = make_question_2(Questions.vegetarian, Answers.VEGETARIANT, Answers.VEGETARIANF);
    show_question(frame, gui, kcontext.getKieRuntime());
end;

rule "Vegan?"
when
    Response(que == Questions.vegetarian, anw == Answers.VEGETARIANT.getFullName());
then
    GUI_question gui = make_question_2(Questions.vegan, Answers.VEGANT, Answers.VEGANF);
    show_question(frame, gui, kcontext.getKieRuntime());
end;

rule "Pizza?"
when
    Response(que == Questions.vegetarian, anw == Answers.VEGETARIANF.getFullName());
then
    GUI_question gui = make_question_2(Questions.pizza, Answers.PIZZAT, Answers.PIZZAF);
    show_question(frame, gui, kcontext.getKieRuntime());
end;

rule "Parents?"
when
    Response(que == Questions.pizza, anw == Answers.PIZZAT.getFullName());
then
    GUI_question gui = make_question_2(Questions.parents, Answers.PARENTST, Answers.PARENTSF);
    show_question(frame, gui, kcontext.getKieRuntime());
end;

rule "Impress?"
when
    Response(que == Questions.parents, anw == Answers.PARENTSF.getFullName());
then
    GUI_question gui = make_question_2(Questions.impress, Answers.IMPRESST, Answers.IMPRESSF);
    show_question(frame, gui, kcontext.getKieRuntime());
end;

rule "Cleaning?"
when
    Response(que == Questions.pizza, anw == Answers.PIZZAF.getFullName());
then
    GUI_question gui = make_question_2(Questions.cleaning, Answers.CLEANINGT, Answers.CLEANINGF);
    show_question(frame, gui, kcontext.getKieRuntime());
end;

rule "Who?"
when
    Response(que == Questions.cleaning, anw == Answers.CLEANINGF.getFullName());
then
    GUI_question gui = make_question_2(Questions.who, Answers.WHOT, Answers.WHOF);
    show_question(frame, gui, kcontext.getKieRuntime());
end;

rule "Thirsty?"
when
    Response(que == Questions.who, anw == Answers.WHOF.getFullName());
then
    GUI_question gui = make_question_2(Questions.thirsty, Answers.THIRSTYT, Answers.THIRSTYF);
    show_question(frame, gui, kcontext.getKieRuntime());
end;

rule "Breakfast?"
when
    Response(que == Questions.thirsty, anw == Answers.THIRSTYF.getFullName());
then
    GUI_question gui = make_question_2(Questions.breakfast, Answers.BREAKFASTT, Answers.BREAKFASTF);
    show_question(frame, gui, kcontext.getKieRuntime());
end;

rule "Summer?"
when
    Response(que == Questions.breakfast, anw == Answers.BREAKFASTT.getFullName());
then
    GUI_question gui = make_question_2(Questions.summer, Answers.SUMMERT, Answers.SUMMERF);
    show_question(frame, gui, kcontext.getKieRuntime());
end;

rule "Benes?"
when
    Response(que == Questions.summer, anw == Answers.SUMMERT.getFullName());
then
    GUI_question gui = make_question_2(Questions.summer, Answers.BENEST, Answers.BENESF);
    show_question(frame, gui, kcontext.getKieRuntime());
end;

rule "Jewish?"
when
    Response(que == Questions.breakfast, anw == Answers.BREAKFASTF.getFullName());
then
    GUI_question gui = make_question_2(Questions.jewish, Answers.JEWISHT, Answers.JEWISHF);
    show_question(frame, gui, kcontext.getKieRuntime());
end;

rule "Wow?"
when
    Response(que == Questions.jewish, anw == Answers.JEWISHF.getFullName());
then
    GUI_question gui = make_question_2(Questions.wow, Answers.WOWT, Answers.WOWF);
    show_question(frame, gui, kcontext.getKieRuntime());
end;

rule "Foreman?"
when
    Response(que == Questions.wow, anw == Answers.WOWF.getFullName());
then
    GUI_question gui = make_question_2(Questions.foreman, Answers.FOREMANT, Answers.FOREMANF);
    show_question(frame, gui, kcontext.getKieRuntime());
end;

rule "Dessert?"
when
    Response(que == Questions.foreman, anw == Answers.FOREMANF.getFullName());
then
    GUI_question gui = make_question_2(Questions.dessert, Answers.DESSERT, Answers.DESSERF);
    show_question(frame, gui, kcontext.getKieRuntime());
end;

rule "Childhood?"
when
    Response(que == Questions.dessert, anw == Answers.DESSERT.getFullName());
then
    GUI_question gui = make_question_2(Questions.childhood, Answers.CHILDHOODT, Answers.CHILDHOODF);
    show_question(frame, gui, kcontext.getKieRuntime());
end;

rule "Pie?"
when
    Response(que == Questions.childhood, anw == Answers.CHILDHOODF.getFullName());
then
    GUI_question gui = make_question_2(Questions.pie, Answers.PIET, Answers.PIEF);
    show_question(frame, gui, kcontext.getKieRuntime());
end;

rule "IceCream?"
when
    Response(que == Questions.pie, anw == Answers.PIEF.getFullName());
then
    GUI_question gui = make_question_2(Questions.icecream, Answers.ICECREAMT, Answers.ICECREAMF);
    show_question(frame, gui, kcontext.getKieRuntime());
end;

rule "Intolerant?"
when
    Response(que == Questions.icecream, anw == Answers.ICECREAMT.getFullName());
then
    GUI_question gui = make_question_2(Questions.intolerant, Answers.INTOLERANTT, Answers.INTOLERANTF);
    show_question(frame, gui, kcontext.getKieRuntime());
end;

rule "Spoon?"
when
    Response(que == Questions.intolerant, anw == Answers.INTOLERANTF.getFullName());
then
    GUI_question gui = make_question_2(Questions.spoon, Answers.SPOONT, Answers.SPOONF);
    show_question(frame, gui, kcontext.getKieRuntime());
end;

rule "School?"
when
    Response(que == Questions.dessert, anw == Answers.DESSERTF.getFullName());
then
    GUI_question gui = make_question_2(Questions.school, Answers.SCHOOLT, Answers.SCHOOLF);
    show_question(frame, gui, kcontext.getKieRuntime());
end;

rule "Drunk?"
when
    Response(que == Questions.school, anw == Answers.SCHOOLF.getFullName());
then
    GUI_question gui = make_question_2(Questions.drunk, Answers.DRUNKT, Answers.DRUNKF);
    show_question(frame, gui, kcontext.getKieRuntime());
end;

rule "Ethnic?"
when
    Response(que == Questions.drunk, anw == Answers.DRUNKF.getFullName());
then
    GUI_question gui = make_question_2(Questions.ethnic, Answers.ETHNICT, Answers.ETHNICF);
    show_question(frame, gui, kcontext.getKieRuntime());
end;

rule "Chain?"
when
    Response(que == Questions.ethnic, anw == Answers.ETHNICF.getFullName());
then
    GUI_question gui = make_question_2(Questions.chain, Answers.CHAINT, Answers.CHAINF);
    show_question(frame, gui, kcontext.getKieRuntime());
end;

rule "Oven?"
when
    Response(que == Questions.chain, anw == Answers.CHAINF.getFullName());
then
    GUI_question gui = make_question_2(Questions.oven, Answers.OVENT, Answers.OVENF);
    show_question(frame, gui, kcontext.getKieRuntime());
end;







// Regu³y do koñcowych opcji (TODO)

rule "Micro Magic"
whens
    Response(que == Questions.japan, anw == Answers.JAPANT.getFullName());
then
    show_result(frame, Results.micro_magic);
end;

rule "Great Value"
when
    Response(que == Questions.unemp, anw == Answers.UNEMPT.getFullName());
then
    show_result(frame, Results.great_value);
end;

rule "Country Rick"
when
    Response(que == Questions.unemp, anw == Answers.UNEMPT.getFullName());
then
    show_result(frame, Results.country_rick);
end;

rule "Tinas Burrito"
when
    Response(que == Questions.unemp, anw == Answers.UNEMPT.getFullName());
then
    show_result(frame, Results.burrito);
end;

rule "fish"
when
    Response(que == Questions.alaska, anw == Answers.ALASKAT.getFullName());
then
    show_result(frame, Results.fish);
end;
